#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#define N 5
#define BUFFER_SIZE 5
sem_t chopsticks[N];
sem_t empty, full;
pthread_mutex_t mutex;
int buffer[BUFFER_SIZE], in = 0, out = 0;
void *philosopher(void *num) {
    int id = *(int *)num;
    printf("Philosopher %d is thinking\n", id);
    sleep(1);
    sem_wait(&chopsticks[id]);
    sem_wait(&chopsticks[(id + 1) % N]);
    printf("Philosopher %d is eating\n", id);
    sleep(1);
    sem_post(&chopsticks[id]);
    sem_post(&chopsticks[(id + 1) % N]);
    printf("Philosopher %d finished eating\n", id);
    return NULL;
}
void *producer(void *arg) {
    for (int i = 0; i < 10; i++) {
        sem_wait(&empty);
        pthread_mutex_lock(&mutex);
        buffer[in] = i;
        printf("Producer produced: %d\n", i);
        in = (in + 1) % BUFFER_SIZE;
        pthread_mutex_unlock(&mutex);
        sem_post(&full);
        sleep(1);
    }
    return NULL;
}
void *consumer(void *arg) {
    for (int i = 0; i < 10; i++) {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);
        int item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
        sleep(1);
    }
    return NULL;
}
int main() {
    pthread_t philosophers[N], prod, cons;
    int ids[N];
for (int i = 0; i < N; i++) {
        sem_init(&chopsticks[i], 0, 1);
    }
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);
      for (int i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);
      for (int i = 0; i < N; i++) {
        pthread_join(philosophers[i], NULL);
    }
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);
    for (int i = 0; i < N; i++) {
        sem_destroy(&chopsticks[i]);
    }
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);
    return 0;
}
