#include <stdio.h>
#define MAX_FRAMES 3
int findOptimal(int pages[], int num_pages, int frames[], int n) {
    int farthest = -1, index = -1;
    for (int i = 0; i < MAX_FRAMES; i++) {
        int j;
        for (j = n + 1; j < num_pages; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    index = i;
                }
                break;
            }
        }
        if (j == num_pages) {
            return i;
        }
    }
    return index;
}
void optimal(int pages[], int num_pages) {
    int frames[MAX_FRAMES];
    int page_faults = 0;
    for (int i = 0; i < MAX_FRAMES; i++) {
        frames[i] = -1;
    }
printf("Page references: ");
    for (int i = 0; i < num_pages; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n");
    for (int i = 0; i < num_pages; i++) {
        int page = pages[i];
        int found = 0;
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }
if (!found) {
            int replace = findOptimal(pages, num_pages, frames, i);
            frames[replace] = page;
            page_faults++;
        }
        printf("Current frames: ");
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] != -1) {
                printf("%d ", frames[j]);
            }
        }
        printf("\n");
    }
printf("Total page faults: %d\n", page_faults);
}
int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
    int num_pages = sizeof(pages) / sizeof(pages[0]);
    optimal(pages, num_pages);
    return 0;
}
